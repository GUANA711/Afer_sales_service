<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zgl.aftersales.dao.QuestionMapper">

    <cache/>

    <select id="findAll" resultType="com.zgl.aftersales.pojo.Users">
        SELECT * FROM users
    </select>

<!--参数-->
    <insert id="addQuestion" parameterType="com.zgl.aftersales.pojo.Question">
             INSERT INTO questions(item_id,Question_type,Question_status,Question_detail,User_id,Commit_time) VALUES(#{ item_id },#{ Question_type },#{ Question_status },#{ Question_detail },#{ User_id},#{ Commit_time })
    </insert>

    <select id="checkQuestion" parameterType="int" resultType="com.zgl.aftersales.pojo.Question">
             SELECT * FROM questions WHERE Question_id = #{ Question_id }
    </select>

    <select id="checkQuestionsubmited" parameterType="int" resultType="com.zgl.aftersales.pojo.Question">
             SELECT * FROM questions WHERE User_id = #{ User_id } and Question_status = "unaccepted"
    </select>

    <select id="checkQuestionfinished" parameterType="int" resultType="com.zgl.aftersales.pojo.Question">
             SELECT * FROM questions WHERE User_id = #{ User_id } and Question_status = "done"
    </select>

    <select id="checkQuestiondealing" parameterType="int" resultType="com.zgl.aftersales.pojo.Question">
             SELECT * FROM questions WHERE User_id = #{ User_id } and Question_status = "accepted"
    </select>

    <select id="checkPostMan" parameterType="int" resultType="com.zgl.aftersales.pojo.Users">
             SELECT * FROM users WHERE User_id = #{ User_id }
    </select>

<!--    zgl-->
    <resultMap id="data" type="com.zgl.aftersales.pojo.Question">
        <result property="Question_id" column="Question_id"></result>
        <result property="item_id" column="item_id"></result>
        <result property="Question_type" column="Question_type"></result>
        <result property="Question_detail" column="Question_detail"></result>
        <result property="Question_status" column="Question_status"></result>
        <result property="User_id" column="User_id"></result>
        <result property="Commit_time" column="Commit_time"></result>
    </resultMap>

    <resultMap id="count1" type="Integer">
        <result column="count"/>
    </resultMap>

    <select id="showAllQuestions" parameterType="map" resultMap="data,count1">
        select SQL_CALC_FOUND_ROWS * from questions limit #{currIndex},#{pageSize};
        select FOUND_ROWS() as count;
    </select>
    <select id="fuzzyQuery" parameterType="map" resultMap="data,count1">
        select SQL_CALC_FOUND_ROWS * from questions
        <where>
            <if test="item_id!=null">
                item_id like CONCAT(CONCAT('%', #{item_id}), '%')
            </if>
            <if test="Question_type!=null">
                Question_type like CONCAT(CONCAT('%', #{Question_type}), '%')
            </if>
            <if test="Question_status!=bull">
                Question_status like CONCAT(CONCAT('%', #{Question_status}), '%')
            </if>
            <if test="Question_detail!=null">
                Question_detail like CONCAT(CONCAT('%', #{text}), '%')
            </if>
            <if test="User_id!=null">
                User_id like CONCAT(CONCAT('%', #{User_id}), '%')
            </if>
            <if test="Commit_time!=null">
                Commit_time like CONCAT(CONCAT('%', #{Commit_time}), '%')
            </if>
        </where>
         limit #{currIndex},#{pageSize};
         select FOUND_ROWS() as count;
    </select>

    <select id="selectAll_id" resultType="integer">
        select Question_id from questions
    </select>
    <select id="selectWorkerByQuesID" parameterType="String" resultType="String">
       select distinct User_name from users s,questions t where s.Item_id=t.Item_id and t.Question_id=#{id} and s.Task_num &lt; 10
    </select>
    <update id="updateStatus" parameterType="String">
        update questions set Question_status='accepted' where Question_id=#{questionID}
    </update>

    <select id="showOvertimeAccepte" resultType="com.zgl.aftersales.pojo.Question">
        select * from questions q ,maintenance m where q.Question_id=m.Question_id and Question_status='overtime'
    </select>
    <select id="shoeOvertimeUnaccepte" resultType="com.zgl.aftersales.pojo.Question">
        select * from questions where Question_status='overtime' and Question_id not in (select q.Question_id  from questions q ,maintenance m where q.Question_id=m.Question_id and Question_status='overtime')
    </select>





    <update id="updateUser" parameterType="com.zgl.aftersales.pojo.Users">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update users
            <set>
                <if test="item.User_name != null">User_name=#{item.User_name},</if>
                <if test="item.Password != null">Password=#{item.Password},</if>
                <if test="item.Tel != null">Tel=#{item.Tel},</if>
                <if test="item.Email != null">Email=#{item.Email},</if>
                <if test="item.Role_id != null">Role_id=#{item.Role_id},</if>
            </set>
            where User_id = #{item.User_id}
        </foreach>
    </update>









</mapper>